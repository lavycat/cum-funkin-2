[gd_scene load_steps=5 format=3 uid="uid://xkuy87cgigh7"]

[ext_resource type="SpriteFrames" uid="uid://ddtvamobj6n66" path="res://assets/ui/funkin/strums.xml" id="2_tsar0"]
[ext_resource type="Script" uid="uid://dx4nabxjsogar" path="res://scenes/game/field/strum_arrow.gd" id="3_a0524"]

[sub_resource type="GDScript" id="GDScript_tsar0"]
script/source = "class_name StrumLine extends Node
var actions:PackedStringArray = [
	\"note_left\",
	\"note_down\",
	\"note_up\",
	\"note_right\"
]
signal note_hit(note:Note)
signal note_miss(note:Note)


@onready var receptors_node: Node2D = $receptors
@onready var notes:NoteField = %notes
var play_field:PlayField

var receptors:Array[Receptor] = []
var pressed:Array[bool] = [false,false,false,false]
var chars:Array[Character] = []
@export var cpu:bool = true
@export var input:bool = false

func _ready() -> void:
	notes.strum_line = self
	for i in receptors_node.get_children():
		if i is Receptor:
			receptors.append(i)
			i.play_anim(\"static\")
	
func column_from_event(event:InputEvent) -> int:
	var column = 0
	for i in actions:
		if event.is_action(i):
			return column
		column += 1
		
	return -1

func _unhandled_input(event: InputEvent) -> void:
	if event.is_echo() or !input:
		return
	var column = column_from_event(event)
	if column == -1:
		return
	var dacolumn = receptors[column]
	pressed[column] = !event.is_released()
	if event.is_pressed():
		var note_array = notes.get_children()
		note_array = note_array.filter(func(note): return note.column == column and not note.missed and abs(note.time - Conductor.time) < note.hit_range)
		for note:Note in note_array:
			if note_array.size() > 1:
				var last_note = null
				for fucknote in note_array:
					if last_note != null:
						if is_equal_approx(last_note.time,fucknote.time):
							note_input(fucknote)
					last_note = fucknote
					
			note_input(note)
			
			break
	
	
func note_input(note:Note):
	play_field.note_hit.emit(note)
	note.was_hit = true
	receptors[note.column].play_anim(\"confirm\",true)

	pass
func _process(delta: float) -> void:
	for i in notes.get_children():
		if i.time <= Conductor.time and !i.was_hit and cpu:
			note_input(i)
func _physics_process(delta: float) -> void:
	var i:int = 0
	for dacolumn in receptors:
		if input:
			if !pressed[i]:
				dacolumn.play_anim(\"static\")
			if dacolumn.animation.contains(\"static\") and pressed[i]:
				dacolumn.play_anim(\"press\")
				
		if dacolumn.animation.contains(\"confirm\") and cpu:
			if !dacolumn.is_playing():
				dacolumn.play_anim(\"static\")
		i += 1
"

[sub_resource type="GDScript" id="GDScript_5ar88"]
script/source = "class_name NoteField extends Node2D
var play_field:PlayField = null
var scroll_speed:float = 1.0:
	get:
		return scroll_speed / Conductor.rate
var down_scroll:bool = false


static var note_hold_cache:Dictionary = {}
static func get_cached_hold_texture(n:Note):
	if not note_hold_cache.has(n.type):
		note_hold_cache.set(n.type,[])
		var dirs = [\"left\",\"down\",\"up\",\"right\"]
		for d in dirs:
			var tex = n.style.note_frames.get_frame_texture(\"%s hold\"%d,0).get_image()
			tex.rotate_90(COUNTERCLOCKWISE)
			var p = ImageTexture.create_from_image(tex)
			note_hold_cache.get(n.type).append(p)
	if not note_hold_cache.get(n.type).is_empty():
		return note_hold_cache.get(n.type)[n.column]

func _ready() -> void: 
	note_hold_cache = {}
func _process(delta: float) -> void:
	if not visible:
		return
	for note:Note in get_children():
		var strum = play_field.strums[note.column]
		note.scale = Vector2(note.style.note_scale,note.style.note_scale)
		var length_diff:float = note.length - note.sustain.length if note.length > 0.0 else 0
		if down_scroll:
			note.position.y = strum.position.y + (Conductor.time - note.time - length_diff) * (450.0 * scroll_speed)
		else:
			note.position.y = strum.position.y + -(Conductor.time - note.time - length_diff) * (450.0 * scroll_speed)
		if note.sustain:
			if note.was_hit:
				if not note.missed:
					note.position.y = min(note.position.y,0)
		note.position.x = strum.position.x
		if note.missed:
			note.modulate.v = 0.6
		if note.was_hit and not note.missed:
			note.sprite.visible = false
"

[node name="Strumline" type="Node2D"]
script = SubResource("GDScript_tsar0")

[node name="receptors" type="Node2D" parent="."]
use_parent_material = true

[node name="left" type="AnimatedSprite2D" parent="receptors"]
use_parent_material = true
position = Vector2(-166, 0)
scale = Vector2(0.7, 0.7)
sprite_frames = ExtResource("2_tsar0")
animation = &"left static"
script = ExtResource("3_a0524")

[node name="down" type="AnimatedSprite2D" parent="receptors"]
use_parent_material = true
position = Vector2(-55, 0)
scale = Vector2(0.7, 0.7)
sprite_frames = ExtResource("2_tsar0")
animation = &"left static"
script = ExtResource("3_a0524")

[node name="up" type="AnimatedSprite2D" parent="receptors"]
use_parent_material = true
position = Vector2(56, 0)
scale = Vector2(0.7, 0.7)
sprite_frames = ExtResource("2_tsar0")
animation = &"left static"
script = ExtResource("3_a0524")

[node name="right" type="AnimatedSprite2D" parent="receptors"]
use_parent_material = true
position = Vector2(167, 0)
scale = Vector2(0.7, 0.7)
sprite_frames = ExtResource("2_tsar0")
animation = &"left static"
script = ExtResource("3_a0524")

[node name="notes" type="Node2D" parent="."]
unique_name_in_owner = true
use_parent_material = true
script = SubResource("GDScript_5ar88")
